#!/usr/bin/env bash

set -eu

BLANK=''

freight::help()
{
  case "${1:-$BLANK}" in
    'pack')
      cat << END
usage: freight pack <tag>

The pack command will create and move to a new branch named in with
the following template: 'freight-cargo/<tag>', stage all current
changes, commit all staged changes on the new branch, and then
return to the branch that was active when the command was run.
END
    ;;
    'unpack')
      cat << END
usage: freight unpack <tag>

The unpack command will attempt to move to a branch generated by an
invocation of the 'freight pack' command, will soft reset the pack
commit, and then return to the branch that was active when the
command was run - bringing the unpacked changes along.
END
    ;;
    'dispatch')
      cat << END
usage: freight dispatch <tag>

The dispatch command will pushed the branch a packed changeset is
committed on to origin. It will then remove the local copy of the
branch.
END
    ;;
    'deliver')
      cat << END
usage: freight deliver <tag>

The deliver command will pull the branch associated with the given
tag from the remote named origin, and then unpack the changes. If
the unpack is successful, then the branch will be deleted from the
remote.
END
    ;;
    'ship')
      cat << END
usage: freight send <tag>

The ship command is a utility command that will execute the pack and
dispatch commands to send changes to origin. If the dispatch fails
(for example, if the tag is already in use) the packed changes will
be unpacked automatically.
END
    ;;
    *)
      cat << END
usage: freight <command> [<args>]

freight accepts the following commands:
help       Shows this menu.
pack       Stores changes and associates them with a tag.
unpack     Restores changes assoicated with a tag.
dispatch   Pushes a packed changeset to origin.
deliver    Pulls a packed changeset from origin and restores it.
ship       Packs and dispatches changes against the given tag.

See 'freight help <command>' to read about the specifics of how the
commands work and what side effects, if any, they have.
END
    ;;
  esac
}

freight::_declare_pack_branch_()
{
  local branch_tag="$1"

  if [[ -z "$branch_tag" ]]; then
    echo 'freight: no tag provided'
    exit 1
  fi

  readonly g_pack_branch="freight-cargo/$branch_tag"
}

freight::_declare_active_branch_()
{
  readonly g_active_branch="$(git branch --show-current)"
}

freight::_declare_remote_()
{
  if [[ -n "${FREIGHT_REMOTE+x}" ]]; then
    readonly g_remote="$FREIGHT_REMOTE"
    return 0
  fi

  readonly g_remote='origin'
}

freight::pack()
{
  if git show-ref --verify --quiet "refs/heads/$g_pack_branch"; then
    echo 'freight: tag already in use'
    exit 1
  fi

  git checkout -b "$g_pack_branch"
  git add -A
  git commit -m '[freight package]'
  git checkout "$g_active_branch"
}

freight::unpack()
{
  git checkout "$g_pack_branch"
  git reset --soft HEAD~1
  git checkout "$g_active_branch"
  git branch -D "$g_pack_branch"
}

freight::dispatch()
{
  if git ls-remote --exit-code --heads "$g_remote" "$g_pack_branch" &> /dev/null; then
      echo 'freight: tag already exists in origin'
      return 1
  fi

  if git push "$g_remote" "$g_pack_branch"; then
    git branch -D "$g_pack_branch"
  fi
}

freight::main()
{
  freight::_declare_remote_

  local command="${1:-$BLANK}"
  local argument="${2:-$BLANK}"

  case "$command" in
    'help')
      freight::help "$argument"
    ;;
    'pack')
      freight::_declare_pack_branch_ "$argument"
      freight::_declare_active_branch_

      freight::pack
    ;;
    'unpack')
      freight::_declare_pack_branch_ "$argument"
      freight::_declare_active_branch_

      freight::unpack
    ;;
    'dispatch')
      freight::_declare_pack_branch_ "$argument"

      freight::dispatch
    ;;
    'deliver')
      freight::_declare_pack_branch_ "$argument"
      freight::_declare_active_branch_

      git fetch "$g_remote" "$g_pack_branch"
      freight::unpack
      git push -d "$g_remote" "$g_pack_branch"
    ;;
    'ship')
      freight::_declare_pack_branch_ "$argument"
      freight::_declare_active_branch_

      freight::pack

      set +e

      if ! freight::dispatch; then
        echo 'freight: failed to dispatch, unpacking'
        freight::unpack
      fi
    ;;
    '')
      freight::help
      exit 1
    ;;
    *)
      echo "freight: '$command' is not a freight command. See 'freight help'."
    ;;
  esac
}

freight::main "$@"
